generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stock {
  id             String     @id @default(cuid())
  //company_id     BigInt?
  name           String?    @db.VarChar(255)
  category       String     @db.VarChar(255)
  buy_price      Float      @default(0) @db.Float
  sell_price     Float      @default(0) @db.Float
  active         Boolean    @default(true)
  amount         Int        @default(0)
  images_allowed Boolean?   @default(false)
  max_images     Int?
  images_json    String?    @db.Text
  files_allowed  Boolean?   @default(false)
  max_files      Int?
  files_json     String?    @db.Text
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  Companies      Companies? @relation(fields: [companiesId], references: [id])
  companiesId    String?
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  companies     Companies[]
  Addresses     Addresses[]
}

model Companies {
  id        String      @id @default(cuid())
  name      String      @db.VarChar(255)
  user      User?       @relation(fields: [usersId], references: [id])
  usersId   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  stock     Stock[]
  Addresses Addresses[]
}

model Addresses {
  id          String     @id @default(cuid())
  number      String?    @db.VarChar(10)
  street      String     @db.VarChar(255)
  postal_code String     @db.VarChar(5)
  city        String?    @db.VarChar(255)
  state       String?    @db.VarChar(255)
  country     String?    @db.VarChar(255)
  active      Boolean?   @default(true) @db.TinyInt
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  Companies   Companies? @relation(fields: [companiesId], references: [id])
  companiesId String?
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}
